:PROPERTIES:
:ID:       fea2efbd-2a1b-44ea-853a-627feaaee3f0
:END:
#+title: Functors
#+author: PureFunctor
#+date: <2021-10-29 Fri>
#+filetags: :PureScript:

This note contains the practical intuition for working with Functors in PureScript. Simply put, a
=Functor= is a [[id:f446efb8-2645-4774-9618-bd6fe1419c13][data structure]] =f= that is parameterized by some type variable =a= that can be modified
using a /mapping/ operation.

In PureScript, =Functor= exists as a [[id:479ebd3d-f89d-45b3-894b-494905524c2f][type class]] defined as the following:
#+begin_src purescript
class Functor f where
  map :: ∀ a. (a → b) → (f a → f b)
#+end_src

** Intuition
A common intuition for Functors is that they are generic container types over some type =a=, that
allows its elements to be modified using the =map= operation. A more /categorial/ intuition to Functors
is that they take some function ~(a → b)~ and /lift/ it to work directly on the container type like so:
~(f a → f b)~.

** Laws
Instances of the =Functor= type class must abide by the following properties:
#+begin_src purescript
-- | Identity
map id = id

-- | Composition
map (f <<< g) == map f . map g
#+end_src
