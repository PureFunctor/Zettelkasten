:PROPERTIES:
:ID:       80f33ef4-c203-414a-8dca-4f2016620142
:END:
#+title: Free and Cofree
#+author: purefunctor
#+date: <2022-02-28 Mon>
#+filetags: :FunctionalPrograming:
#+hugo_base_dir: ../site

This post contains some fleeting thoughts I have on =Free= and =Cofree=.

#+hugo: more

* Introduction

I recently tweeted that:

#+begin_quote
I like to think of =Free= and =Cofree= in terms of combinators.

=Free f a= makes it easy to use =f= as a fixed point, by having the choice of either termination or recursion.

=Cofree f a= does the same in terms of recursion, albeit without the termination.
#+end_quote

As it turns out, I was pretty close to an intuitive definition.

* Where does the "co" come from?

=Free= is usually encoded as a sum type =Pure a | Roll (f (Free f a))=, while =Cofree= is encoded as a
product type =Tuple a (f (Cofree f a))=. The duality between =Free= and =Cofree= also extends to their
use of recursion and corecursion.

=Free= makes use of recursion, which reduces some data into a base case, while =Cofree= makes use of
corecursion, which takes a seed and unfolds it into some data. With =Free f a=, we obtain the least
fixed point of =f=, while in =Cofree f a=, we get the greatest fixed point of =f=. In simpler terms, =Free=
provides recursion and termination for =f=, while =Cofree= provides corecursion but depends on =f= for
optional termination.

** =Free f Void= ~ =Cofree f Unit= ~ =Mu f=

This section proves that =Mu f= is isomorphic to =Free f Void= and =Cofree f Unit=. Note that I'm using
PureScript definitions here, hence the use of =Mu= instead of =Fix=. Given the following definitions:

#+begin_src haskell
newtype Mu f = In (f (Mu f))

data Free f a = Pure a | Roll (f (Free f a))

data Cofree f a = Cons a (f (Cofree f a))

data Void

data Unit = Unit
#+end_src

** =Free f Void= ~ =Mu f=
#+begin_src haskell
Free f Void = Pure Void | Roll (f (Free f Void))

-- Void makes Pure impossible to construct.

Free f Void = Roll (f (Free f Void))

-- We can see that this has the same shape as Mu.

Mu f = In (f (Mu f))
#+end_src

** =Cofree f Unit= ~ =Mu f=
#+begin_src haskell
Cofree f Unit = Cons Unit (f (Cofree f Unit))

-- Unit always has a single inhabitant.

Cofree f Unit = Cons (f (Cofree f Unit))

-- We can see that this has the same shape as Mu.

Mu f = In (f (Mu f))
#+end_src


* Basic Isomorphisms

Some algebraic data types can be derived from =Free= / =Cofree= by simply plugging a functor to the type
variable =f=. Here are some examples:

** =Cofree Maybe a= ~ =List a=

In this example, the =Maybe= type provides termination for =Cofree Maybe a=, which results in a finite
cons-list of =a=.

#+begin_src haskell
Maybe a = Just a | Nothing

Cofree Maybe a = CofreeCons a (Maybe (Cofree Maybe a))
  
List a = Cons a (List a) | Nil

CofreeCons 0 (Just (CofreeCons 1 Nothing)) ~ Cons 0 (Cons 1 Nil)  
#+end_src

* Basic Examples

This section provides basic examples of =Free= and =Cofree= in PureScript.

** Factorial Generator

=Cofree Id a= allows an infinite stream of values of type =a=. It can be used to define a stream which
generates factorial values on the fly, which can then be dissected using =head= and =tail=.

#+begin_src haskell
module Main where

import Prelude

import Control.Comonad.Cofree (Cofree, buildCofree, head, tail)
import Data.Tuple (Tuple(..))
import Effect (Effect)
import Effect.Console (logShow)
import Data.Functor.Polynomial (Id(..))

factorial :: Cofree Id Int
factorial = buildCofree (\(Tuple x y) -> Tuple y (Id (Tuple (x + 1) ((x + 1) * y)))) (Tuple 0 1)

factorial' :: Int -> Int
factorial' = flip go factorial
  where
  go 0 = head
  go n = tail >>> case _ of
    Id co -> go (n - 1) co

main :: Effect Unit
main = do
  logShow $ factorial' 5
#+end_src
