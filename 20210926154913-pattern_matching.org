:PROPERTIES:
:ID:       d0079b91-cea6-4adf-8fc0-98ce39f5d5f2
:END:
#+title: Pattern Matching
#+filetags: :PureScript:

* Pattern Matching
Pattern matching is a common language feature in functional languages
that allow [[id:f446efb8-2645-4774-9618-bd6fe1419c13][algebraic data types]] to be /deconstructed/ into their contents.

Taking ~Either~ as an example, we can define the following deconstruction:
#+begin_src purescript
either :: forall a b c. (a -> c) -> (b -> c) -> Either a b -> c
either f _ (Left a)  = f a
either _ g (Right b) = g b
#+end_src

For ~Tuple~, on the other hand, we can do:
#+begin_src purescript
addTuple :: forall a b c. (a -> b -> c) -> Tuple a b -> c
addTuple f (Tuple a b) = f a b
#+end_src

Note that for sum types, if we're unable to define a pattern for one
variant, PureScript tags the declaration with the [[https://pursuit.purescript.org/builtins/docs/Prim#t:Partial][Partial]] [[id:479ebd3d-f89d-45b3-894b-494905524c2f][type class]].
#+begin_src purescript
fromLeft :: forall a b. Partial => Either a b -> a
fromLeft (Left a) = a
#+end_src
