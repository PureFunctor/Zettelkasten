:PROPERTIES:
:ID:       854c9e81-0891-4cc3-a8f7-76f2b49f2653
:END:
#+title: Type Roles
#+filetags: :PureScript:

* Type Roles
Type roles pertain to annotations that dictate whether some variable is
=nominal=, =representational=, or a =phantom= type variable. In PureScript,
these annotations are mostly used by the [[id:c4317425-5316-486f-8b79-70df22ea5dcd][Coercible]] [[id:479ebd3d-f89d-45b3-894b-494905524c2f][type class]].

** Nominal
A =nominal= type variable pertains to a type variable that must _never_ be
changed. One such example is the ~Region~ of the [[id:67ac9e1f-a8ad-48e7-a6ba-bc3aed168457][ST]] [[id:72cf5e6f-b268-40b7-87de-edddf2fa26f1][monad]]. Since the
purpose of this type variable is to protect state from leaking out, even
if it's semantically a phantom type variable, it must never be changed.

#+begin_src purescript
data ST :: Region -> Type -> Type
data ST r v

type role ST nominal representational
#+end_src

** Representational
A =representational= type variable pertains to a type variable that can be
changed in some form or another such as through [[id:c4317425-5316-486f-8b79-70df22ea5dcd][Coercible]].

#+begin_src purescript
data List a = Cons a (List a) | Nil

type role List representational
#+end_src

Note that =representational= is the default role annotation for all type
variables except for =phantom= type variables.

** Phantom
A =phantom= type variable pertains to a type variable that is never used
in some data declaration. Phantom type variables are often used to
annotate some type with extra type-level information.

#+begin_src purescript
newtype Annotated (n :: Symbol) a = Annotated a

type role Annotated phantom representational
#+end_src

Like =representational= the compiler also automaticall derives this.
