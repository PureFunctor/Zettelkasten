:PROPERTIES:
:ID:       a603d7e4-d9a5-4d0f-a7a3-13c939200c2a
:END:
#+title: Newtypes
#+author: PureFunctor
#+date: <2021-09-24 Fri>
#+filetags: :PureScript:

* Newtypes
A newtype is a special form of an [[id:f446efb8-2645-4774-9618-bd6fe1419c13][algebraic data type]] that incurs no
additional runtime cost much like a [[id:9c6747de-6130-4b88-9fe1-063a3b02d67c][type synonym]]. In order to achieve this,
newtypes can only be constructed with one term parameter.

As an example, the ~Const a~ [[id:fea2efbd-2a1b-44ea-853a-627feaaee3f0][functor]] is implemented as a newtype over ~a~:
#+begin_src purescript
newtype Const a b = Const a

runConst :: forall a b. Const a b → a
runConst (Const a) = a
#+end_src

Haskell/PureScript optimizes away the construction/deconstruction of the
~Const~ data type, and as such, we can also say that at runtime, ~Const a b~
is [[id:f50d4e12-cf1d-4688-9145-64a95a08e1f0][isomorphic]] to the ~a~ type.

** Newtypes for Extending Behaviour
:PROPERTIES:
:ID:       0b88319b-63f7-49c1-930a-76111044bc95
:END:
A common use for newtypes is to extend the behaviour of some base type
such as specifying how to combine them through a monoid.

As an additional example, the ~Additive~ newtype wraps around the ~Int~ type
to provide [[id:c3ebd494-8866-4e69-b17e-a3680484e188][Semigroup]] and [[id:9789aaf8-adc3-4d24-ac89-08a08d11aa7a][Monoid]] instances.
#+begin_src purescript
newtype Additive = Additive Int

instance Semigroup Additive where
  append (Additive n) (Additive m) = Additive (n + m)

instance Monoid Additive where
  mempty = Additive 0
#+end_src

** Newtypes for Semantic Information
:PROPERTIES:
:ID:       480b7922-9f70-4616-ac20-99c1bc87314c
:END:
Newtypes can also be used to add semantic information to plain old types
such as ~Int~ or ~Number~; take for example the ~sleep~:

#+begin_src purescript
sleep :: Int → IO ()
#+end_src

Without any documentation, it's unclear what the purpose of ~Int~ here
is. Does it mean /seconds/? maybe /minutes/? or even /hours/? We can make its
purpose clear using a newtype wrapper:

#+begin_src purescript
newtype Seconds = Seconds Int

sleep :: Seconds → IO ()
#+end_src

Now we know that ~sleep~ takes seconds!

** Newtype Type Class
:PROPERTIES:
:ID:       a60dee0b-b69c-414c-90a7-282facd4d889
:END:
In PureScript, the ~Newtype~ [[id:479ebd3d-f89d-45b3-894b-494905524c2f][type class]] is provided by the [[https://pursuit.purescript.org/packages/purescript-newtype/4.0.0][newtype]]
package. It provides convenience functions for wrapping and unwrapping
newtypes from their containers. It's defined as the following:

#+begin_src purescript
class Coercible t a <= Newtype t a | t -> a
#+end_src

The following functions are also defined:

#+begin_src purescript
wrap :: forall t a. Newtype t a => a -> t
wrap = coerce

unwrap :: forall t a. Newtype t a => t -> a
unwrap = coerce
#+end_src

The PureScript compiler allows instances of the ~Newtype~ type class to be
derived.

#+begin_src purescript
newtype Additive = Additive Int

-- | We use a wildcard here to let the compiler
-- | infer the type for us, proving its isomorphism
-- | using the `Coercible` type class.
derive instance Newtype Additive _
#+end_src

See also:
- [[id:c4317425-5316-486f-8b79-70df22ea5dcd][Coercible]]
- [[id:77b3c787-4a0c-4640-84a1-156c6ea8b757][Functional Dependencies]]
- [[id:f50d4e12-cf1d-4688-9145-64a95a08e1f0][Isomorphisms]]
- [[id:969037db-ee30-4c4c-8772-75cd07f0106f][Type Wildcards]]
